{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","authenticated","setAuthenticated","useEffect","name","getNoteById","id","fetch","method","credentials","headers","body","JSON","stringify","then","r","json","Note","Body","parse","setRawData","console","log","catch","UserName","Password","RememberMe","sort","filter","Stubs","find","p","T","ID","rawData","className","src","logo","alt","style","marginRight","display","flexDirection","margin","initialFollowers","value","map","k","v","key","full_name","username","Object","entries","deltas","d","o","i","Date","toDateString","o1","i1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c62676c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [authenticated, setAuthenticated]=useState(false);\n\n  useEffect(()=>{\n    const getNoteByName=(name)=>()=>{\n      fetch('Note/LoadStubs', {\n        method:'POST',\n        credentials:'include',\n        headers:{'Content-Type': 'application/json'},\n        body: JSON.stringify({sort: 0, filter: null})\n      })\n      .then(r=>r.json())\n      .then(r=>r.Stubs.find(p=>p.T===name))\n      .then(r=>r.ID)\n      .then(r=>getNoteById(r))\n      .catch(console.log)\n    }\n  \n    const getNoteById=(id)=>{\n      fetch('Note/LoadNote', {\n        method:'POST',\n        credentials:'include',\n        headers:{'Content-Type': 'application/json'},\n        body: JSON.stringify({id})\n      })\n      .then(r=>r.json())\n      .then(r=>r.Note.Body)\n      .then(JSON.parse)\n      .then(r=>{\n        setRawData(r)\n        console.log(r)\n      })\n      .catch(console.log)\n    }\n\n    fetch('login',{\n      method:'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({UserName:'swd543', Password:'helloscribz!22213',RememberMe:true})\n    })\n    .then(setAuthenticated(true))\n    .then(getNoteByName(\"Instagram\"))\n    .catch(console.log)\n  }, [])\n\n  const [rawData, setRawData]=useState()\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" style={{marginRight:'auto'}} />\n        <p style={{marginRight:'20px'}}>\n          Authenticated? {authenticated?'Yeah!':'Nope'}\n        </p>\n      </header>\n        {rawData?(\n          <div style={{display:'flex', flexDirection:'row'}}>\n            <div style={{display:'flex', flexDirection:'column',margin:'10 px auto'}}>\n              {rawData.initialFollowers.value.map((k,v)=>(\n                <p key={v}>\n                  {k.full_name} {k.username}\n                </p>\n              ))}\n            </div>\n            <div style={{display:'flex', flexDirection:'column',margin:'10px auto'}}>\n              <h1>Unfollowers</h1>\n              {\n                Object.entries(rawData.deltas).filter(d=>d[1].key===\"UNFOLLOWERS\").map((o,i)=>(\n                <table key={i} className=\"bad card\">\n                  <thead>\n                    <tr>\n                      <th>\n                        {new Date(o[0]).toDateString()}\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {o[1].value.map((o1,i1)=>(\n                      <tr key={i1}>\n                        <td>\n                          {o1.full_name}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n                ))\n              }\n            </div>\n            <div style={{display:'flex', flexDirection:'column',margin:'10px auto'}}>\n              <h1>New followers</h1>\n              {\n                Object.entries(rawData.deltas).filter(d=>d[1].key===\"ADDED_FOLLOWERS\").map((o,i)=>(\n                <table key={i} className=\"good card\">\n                  <thead>\n                    <tr>\n                      <th>\n                        {new Date(o[0]).toDateString()}\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {o[1].value.map((o1,i1)=>(\n                      <tr key={i1}>\n                        <td>\n                          {o1.full_name}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n                ))\n              }\n            </div>\n          </div>\n        ):(<p>Loading...</p>)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}